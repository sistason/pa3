---
# Create web network, for better firewalling comfortability. Don't forget to actually configure your fw for this!
- name: Create network
  become: yes
  docker_network:
    name: pa3_net
    driver: bridge
    driver_options:
      com.docker.network.bridge.name: pa3-docker-br
    ipam_options:
      subnet: '{{ subnet }}.0/28'

# Copy src
- name: create pa3 directory
  file: 
    path: "{{ build_directory }}" 
    state: "directory"

- name: Copy frontent to the host
  synchronize:
    src: files/pa3_frontend
    dest: "{{ build_directory }}"
    rsync_opts:
      - "--exclude=apache2-site.conf.j2"
      - "--exclude=update_script.sh.j2"

- name: Template the cron-script
  template:
    src: files/pa3_frontend/update_script.sh.j2
    dest: "{{ build_directory }}/pa3_frontend/update_script.sh"
  when: use_gitlab

- name: setup the cron-script in cron
  cron:
    name: "update_recognition"
    minute: "0"
    hour: "*"
    job: "{{ build_directory }}/pa3_frontend/update_script.sh"
  when: use_gitlab

- name: Copy apache2-config with server_url
  template:
    src: files/pa3_frontend/apache2-site.conf.j2
    dest: "{{ build_directory }}/pa3_frontend/apache2-site.conf"

- name: Copy proxy to the host
  synchronize:
    src: files/pa3_proxy
    dest: "{{ build_directory }}/"
    rsync_opts:
      - "--exclude=proxy.conf.j2"

- name: Copy nginx-proxy-config with server_url
  template:
    src: files/pa3_proxy/proxy.conf.j2
    dest: "{{ build_directory }}/pa3_proxy/proxy.conf"

# --- Set secrets ---
# Secrets were copied to this host and localhost by the playbook_tasks_get_secrets beforehand
- set_fact:
    secret_data_mysql_root_password: "{{ lookup('file', 'secrets/mysql_root_password') }}"

# Build containers
# Ansible-docker_build has poor performance and docker build already has the idempotence, so use the command-module here
- name: Copy .dockerignore
  synchronize:
    src: files/.dockerignore
    dest: "{{ build_directory }}/"

- name: Build frontend
  become: yes
  command: "docker build -t pa3_frontend:latest -f {{ build_directory }}/pa3_frontend/Dockerfile_frontend {{ build_directory }}"

- name: Build proxy
  become: yes
  command: "docker build -t pa3_proxy:latest -f {{ build_directory }}/pa3_proxy/Dockerfile_proxy {{ build_directory }}/pa3_proxy"

# Start web containers
- name: Make sure that the database-volume directory exists
  file: 
    path: "{{ build_directory }}/pa3_mysql"
    state: "directory"

- name: Start mysql container
  become: yes
  docker_container:
    name: pa3_mysql
    hostname: pa3_mysql
    image: pa3_mysql
    state: started
    networks:
      - name: "pa3_net"
        ipv4_address: "{{ subnet }}.3"
    volumes:
      - "{{ build_directory }}/pa3_mysql:/var/lib/mysql:rw"
    env:
      MYSQL_DATABASE: "pa3_django"
      MYSQL_ROOT_PASSWORD: "{{ secret_data_mysql_root_password }}"
  register: mysql_container

- name: Wait for the mysql-container to be up and to have build the database
  wait_for:
    timeout: 15
  when: mysql_container.changed

- name: Make sure the certificates-directory exists
  file:
    path: "{{ build_directory }}/letsencrypt"
    state: "directory"

- name: Start letsencrypt proxy container
  become: yes
  docker_container:
    name: pa3_proxy
    image: pa3_proxy
    command: "{{ server_url }}"
    networks:
      - name: "pa3_net"
        ipv4_address: "{{ subnet }}.2"
    volumes:
      - "{{ build_directory }}/letsencrypt:/etc/letsencrypt:rw"

- name: Wait for the certificate build by the proxy
  become: yes
  wait_for:
    path: "{{ build_directory}}/letsencrypt/archive/{{ server_url }}"
    timeout: 60

- name: Start frontend container
  become: yes
  docker_container:
    name: pa3_frontend
    hostname: pa3_frontend
    image: pa3_frontend
    state: started
    networks:
      - name: "pa3_net"
        ipv4_address: "{{ subnet }}.4"
    volume_driver: bind
    volumes:
      - "{{ build_directory }}/letsencrypt/archive:/etc/apache2/ssl:rw"
